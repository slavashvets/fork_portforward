# This file is autogenerated by maturin v1.8.3
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: x86
          - runner: ubuntu-22.04
            target: aarch64
          - runner: ubuntu-22.04
            target: armv7
          - runner: ubuntu-22.04
            target: s390x
          - runner: ubuntu-22.04
            target: ppc64le
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
          before-script-linux: |
            set -euxo pipefail

            # ---- RHEL / CentOS -------------------------------------------------------
            if command -v yum &>/dev/null; then
                yum -y update
                yum -y install perl-core openssl openssl-devel pkgconfig libatomic

                # i686 needs libatomic symlink for OpenSSL
                if [[ ! -d /usr/lib64 ]]; then
                    ln -sf /usr/lib/libatomic.so.1 /usr/lib/libatomic.so
                fi

            # ---- Debian / Ubuntu -----------------------------------------------------
            else
                apt-get -y update

                # Basic build deps
                apt-get -y install --no-install-recommends \
                    libssl-dev openssl pkg-config

                # Extra bits when we cross‑compile for s390x
                if [[ "${CARGO_BUILD_TARGET:-}" == s390x* ]]; then
                    # Disable the hand‑written z16 assembly that the Jammy assembler
                    # (binutils 2.38) can’t understand.
                    export OPENSSL_NO_ASM=1

                    # Install the cross tool‑chain so Rust can actually link for s390x.
                    # (The version in 22.04 is fine for pure C but isn’t new enough
                    # for the CIJ* opcodes.)
                    apt-get -y install --no-install-recommends \
                        gcc-s390x-linux-gnu binutils-s390x-linux-gnu
                fi
            fi
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: x86
          - runner: ubuntu-22.04
            target: aarch64
          - runner: ubuntu-22.04
            target: armv7
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: musllinux_1_2
          before-script-linux: |
            set -euxo pipefail

            # ---- RHEL / CentOS -------------------------------------------------------
            if command -v yum &>/dev/null; then
                yum -y update
                yum -y install perl-core openssl openssl-devel pkgconfig libatomic

                # i686 needs libatomic symlink for OpenSSL
                if [[ ! -d /usr/lib64 ]]; then
                    ln -sf /usr/lib/libatomic.so.1 /usr/lib/libatomic.so
                fi

            # ---- Debian / Ubuntu -----------------------------------------------------
            else
                apt-get -y update

                # Basic build deps
                apt-get -y install --no-install-recommends \
                    libssl-dev openssl pkg-config

                # Extra bits when we cross‑compile for s390x
                if [[ "${CARGO_BUILD_TARGET:-}" == s390x* ]]; then
                    # Disable the hand‑written z16 assembly that the Jammy assembler
                    # (binutils 2.38) can’t understand.
                    export OPENSSL_NO_ASM=1

                    # Install the cross tool‑chain so Rust can actually link for s390x.
                    # (The version in 22.04 is fine for pure C but isn’t new enough
                    # for the CIJ* opcodes.)
                    apt-get -y install --no-install-recommends \
                        gcc-s390x-linux-gnu binutils-s390x-linux-gnu
                fi
            fi

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, musllinux, windows, macos, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'wheels-*/*'
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
